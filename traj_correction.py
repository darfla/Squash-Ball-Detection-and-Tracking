# trajectories = [[[555.0462036132812, 324.3307800292969, 21, 0.999056], [553.0, 330.0, 23, 0.941201]],
#                 [[917.0, 403.5, 20, 0.999996], [917.5, 405.0, 21, 0.999991], [918.0, 406.5, 22, 0.999996], [918.5, 407.5, 23, 0.999993], [918.5, 408.5, 24, 0.99997], [919.0, 409.0, 25, 0.999995], [919.5, 409.0, 26, 0.999994], [919.5, 409.0, 27, 0.999986], [919.5, 408.5, 28, 0.999949], [920.5, 407.5, 29, 0.999994], [920.5, 406.5, 30, 0.999988], [920.5, 405.5, 31, 0.999973], [920.5, 403.5, 32, 0.999973], [921.5, 402.0, 33, 0.999997], [921.5, 400.0, 34, 0.999997], [921.5, 397.5, 35, 0.999988], [921.5, 395.0, 36, 0.999988], [921.5, 391.5, 37, 0.999989], [921.5, 388.5, 38, 0.999988]],
#                 [[714.0, 274.5, 49, 0.543562], [702.0, 272.5, 51, 0.526966], [696.5, 273.0, 52, 0.509965]],
#                 [[589.0, 544.5, 64, 0.87645], [581.5, 542.0, 65, 0.999974], [573.0, 539.0, 66, 0.991668], [566.0, 536.5, 67, 0.999659], [558.0, 532.5, 68, 0.999599], [550.0, 529.5, 69, 0.999285], [541.0, 525.0, 70, 0.998898], [532.5, 520.5, 71, 0.99917], [524.0, 516.5, 72, 0.998354], [515.0, 510.5, 73, 0.996654], [505.5, 505.5, 74, 0.997255], [496.0, 499.5, 75, 0.987999], [486.5, 493.5, 76, 0.999508], [476.0, 486.5, 77, 0.972332], [465.5, 479.0, 78, 0.996031], [455.0, 471.5, 79, 0.995336], [444.5, 463.5, 80, 0.996606], [433.0, 454.5, 81, 0.957619], [421.5, 445.5, 82, 0.717673], [409.5, 435.5, 83, 0.992268], [397.5, 425.5, 84, 0.923967], [385.0, 415.5, 85, 0.986592], [372.0, 403.0, 86, 0.946205], [358.5, 391.0, 87, 0.947749], [345.0, 378.0, 88, 0.905327], [367.0, 419.5, 92, 0.833085], [377.5, 435.5, 93, 0.892936], [388.0, 450.0, 94, 0.780636], [396.5, 462.0, 95, 0.927034], [405.0, 474.0, 96, 0.972209], [412.0, 484.0, 97, 0.928148], [419.0, 492.5, 98, 0.85288], [425.5, 501.0, 99, 0.9447], [431.0, 507.5, 100, 0.976434], [436.5, 514.5, 101, 0.967978], [441.0, 519.0, 102, 0.999674], [438.5, 518.5, 103, 0.999841], [435.5, 517.5, 104, 0.99968], [432.5, 516.5, 105, 0.999748], [429.5, 515.5, 106, 0.999451], [426.0, 513.5, 107, 0.999957], [422.5, 511.5, 108, 0.999727], [419.5, 509.5, 109, 0.999487], [416.5, 507.5, 110, 0.99922], [412.5, 504.5, 111, 0.997418], [409.5, 501.0, 112, 0.999931], [406.0, 498.5, 113, 0.999938], [402.5, 494.5, 114, 0.999812], [398.5, 491.0, 115, 0.99931], [395.0, 486.5, 116, 0.999622], [391.0, 482.5, 117, 0.999081], [387.5, 478.0, 118, 0.996509], [383.5, 473.0, 119, 0.999362], [379.5, 467.5, 120, 0.998962], [375.5, 462.0, 121, 0.999152], [371.5, 456.0, 122, 0.999496], [367.0, 449.5, 123, 0.99957], [363.0, 443.0, 124, 0.999429], [358.5, 435.5, 125, 0.99931], [356.0, 428.5, 126, 0.999659], [354.0, 422.0, 127, 0.999703], [352.0, 415.0, 128, 0.999141], [349.5, 407.0, 129, 0.999146], [347.5, 398.5, 130, 0.997299], [345.0, 391.0, 131, 0.998338], [343.0, 382.0, 132, 0.998064], [340.5, 372.5, 133, 0.995978], [338.0, 362.5, 134, 0.997885], [336.0, 352.5, 135, 0.998851], [333.0, 342.0, 136, 0.99582], [331.0, 331.0, 137, 0.995071], [328.0, 319.0, 138, 0.993363], [326.0, 307.0, 139, 0.983084], [323.5, 296.0, 140, 0.995479], [317.5, 268.0, 142, 0.544218], [314.5, 253.0, 143, 0.94953], [312.0, 238.0, 144, 0.823203], [309.5, 223.5, 145, 0.922345], [306.5, 207.0, 146, 0.603223], [303.5, 190.0, 147, 0.768317], [300.0, 171.5, 148, 0.732705], [298.0, 171.5, 149, 0.999977], [295.5, 175.5, 150, 0.999003], [293.5, 178.0, 151, 0.998683], [291.5, 181.5, 152, 0.999761], [289.0, 183.5, 153, 0.999903], [286.5, 186.5, 154, 0.999975]]]

def build_features(trajectories):
    traj_features = []

    for count_t1, traj1 in enumerate(trajectories):
        total_score = 0
        max_score = 0

        for point in traj1:
            total_score += point[3]
            if point[3] > max_score:
                max_score = point[3]

        avg_score = total_score / (len(traj1))
        traj_features.append([avg_score, len(traj1), traj1[0][2], traj1[-1][2], max_score])

    return traj_features


def correct_trajectories(trajectories, traj_features, max_score_thresh, len_thresh):
    remove = []

    for count_t, traj in enumerate(trajectories):
        out = False

        if traj_features[count_t][4] < max_score_thresh:
            remove.append(count_t)
            continue

        rj = 0
        for j in range(count_t+1, len(trajectories)):
            if traj[-1][2] >= trajectories[j-rj][0][2]: # check if trajectories overlap (last point t1 >= first point t2)
                overlap_completely1 = (traj[0][2] <= trajectories[j-rj][0][2]) and (traj[-1][2] >= trajectories[j-rj][-1][2])     # 1st <= 1st and last => last
                overlap_completely2 = (traj[0][2] > trajectories[j - rj][0][2]) and (traj[-1][2] < trajectories[j - rj][-1][2])   # 1st > 1st and last < last
                t1_score = traj_features[count_t][0]
                t1_length = traj_features[count_t][1]
                t2_score = traj_features[j-rj][1]
                t2_length = traj_features[j-rj][1]
                if ((t1_score > t2_score) and (t1_length >= t2_length)) or (t1_length/t2_length > len_thresh) or ((overlap_completely1) and (t1_length-t2_length >= 2)):
                    del trajectories[j-rj]
                    del traj_features[j-rj]
                    rj +=1
                elif((t1_score < t2_score) and (t1_length <= t2_length)) or (t2_length/t1_length > len_thresh) or ((overlap_completely2) and (t2_length-t1_length >= 2)):
                    remove.append(count_t)
                    out = True
                    break
        if out:
            continue


    worse_traj_count = 0
    for a in remove:
        del trajectories[a-worse_traj_count]
        del traj_features[a-worse_traj_count]
        worse_traj_count += 1

    return trajectories, traj_features
